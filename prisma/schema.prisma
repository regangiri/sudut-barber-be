datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model User {
  id        String             @id @default(uuid())
  email     String             @unique
  password  String
  phone     String?            @unique
  name      String?
  booking   Booking[]
  review    Review[]
  points    PointTransaction[]
  createdAt DateTime           @default(now())
}

model Barber {
  id        String          @id @default(uuid())
  name      String
  bio       String?
  services  BarberService[]
  reviews   Review[]
  bookings  Booking[]
  createdAt DateTime        @default(now())
}

model Service {
  id          String          @id @default(uuid())
  name        String
  description String?
  duration    Int // duration in minutes
  price       Float
  point       Int?            @default(0)
  barber      BarberService[]
  bookings    Booking[]
}

model BarberService {
  barberId  String
  serviceId String

  barber  Barber  @relation(fields: [barberId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@id([barberId, serviceId]) // Composite primary key
}

model Booking {
  id        String        @id @default(uuid())
  userId    String
  barberId  String
  serviceId String
  startTime DateTime
  status    BookingStatus @default(PENDING)

  user    User    @relation(fields: [userId], references: [id])
  barber  Barber  @relation(fields: [barberId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  review Review?
  points PointTransaction[]

  createdAt DateTime @default(now())

  @@unique([barberId, startTime])
}

model Review {
  id        String  @id @default(uuid())
  rating    Int
  comment   String?
  userId    String
  barberId  String
  bookingId String  @unique

  user    User    @relation(fields: [userId], references: [id])
  barber  Barber  @relation(fields: [barberId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
}

model PointTransaction {
  id        String    @id @default(uuid())
  userId    String
  bookingId String?
  points    Int
  type      PointType
  reason    String?
  createdAt DateTime  @default(now())

  user    User     @relation(fields: [userId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])

  @@index([userId])
  @@index([bookingId])
}

enum PointType {
  EARNED
  REDEEMED
  ADJUSTMENT
}
